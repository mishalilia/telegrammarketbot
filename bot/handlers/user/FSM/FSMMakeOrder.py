from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message
from bot.database import db
from bot.keyboards import cancel_user_kb, user_kb, location_kb, more_kb, confirm_kb
from bot.misc import get_price, form_order, get_product_cost
import bot
import uuid


class FSMMakeOrder(StatesGroup):
    product_id = State()
    size = State()
    more = State()
    confirm = State()
    location = State()
    payment = State()
    products = {}
    more_flag = False


async def mo_start(message: Message):
    await FSMMakeOrder.product_id.set()
    await bot.bot.send_message(message.from_user.id, "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞.", reply_markup=cancel_user_kb)


async def mo_load_product_id(message: Message, state: FSMContext):
    product = db.get_product_by_id(message.text)

    if product is None:
        await bot.bot.send_message(message.from_user.id, "‚ùå –¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    else:
        await FSMMakeOrder.next()
        await bot.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä.")
        FSMMakeOrder.products[product.product_id] = {}
        FSMMakeOrder.products[product.product_id]["link"] = product.link
        async with state.proxy() as data:
            data["product_id"] = message.text


async def mo_load_size(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["size"] = message.text.upper()
        FSMMakeOrder.products[data["product_id"]]["size"] = data["size"]

        loading_msg = await bot.bot.send_message(message.from_user.id, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–º–µ—Ä–∞. "
                                                                       "(–≠—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥)")

        price = await get_price(data["size"], FSMMakeOrder.products[data["product_id"]]["link"])
        await loading_msg.delete()

        if price:
            await FSMMakeOrder.next()
            FSMMakeOrder.products[data["product_id"]]["size"] = data["size"]
            FSMMakeOrder.products[data["product_id"]]["price"] = get_product_cost(float(price) * 1.15) + 5000
            await bot.bot.send_message(message.from_user.id, "‚úÖ –ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏.")
            await bot.bot.send_message(message.from_user.id, "–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä?", reply_markup=more_kb)

        else:
            del FSMMakeOrder.products[data["product_id"]]
            await bot.bot.send_message(message.from_user.id, "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.", reply_markup=user_kb)
            if len(FSMMakeOrder.products):
                await bot.bot.send_message(message.from_user.id, "–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä?",
                                           reply_markup=more_kb)
            else:
                await state.finish()
                return


async def mo_more(message: Message, state: FSMContext):
    FSMMakeOrder.more_flag = True

    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë":
        await mo_start(message)

    elif message.text == "üôÖüèª‚Äç‚ôÇÔ∏è –ù–µ—Ç":
        await FSMMakeOrder.next()

        loading_msg = await bot.bot.send_message(message.from_user.id, "üïí –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑, –æ–∂–∏–¥–∞–π—Ç–µ.")
        await bot.bot.send_message(message.from_user.id, form_order(FSMMakeOrder.products), reply_markup=confirm_kb)
        await loading_msg.delete()


async def mo_confirm(message: Message, state: FSMContext):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await FSMMakeOrder.next()
        await bot.bot.send_message(message.from_user.id,
                                   "‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏. (–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é"
                                   " –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì. –ú–æ—Å–∫–≤–∞, –ü—Ä–æ—Ñ—Å–æ—é–∑–Ω–∞—è"
                                   " —É–ª., –¥. 43–∫2, –∫–≤. 7, 117420)",
                                   reply_markup=location_kb)


async def mo_load_location(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if message.content_type == "text":
            data["location"] = f"text:{message.text}"
        else:
            data["location"] = f"location:{message.location.latitude};{message.location.longitude}"

        text = "–ú—ã –≤–Ω–µ—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É ‚òëÔ∏è\n" \
               "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n" \
               "–°–±–µ—Ä\n2202201555870191\n–î–∞–Ω–∏–∏–ª –†—É—Å–ª–∞–Ω–æ–≤–∏—á –õ.\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û" \
               " –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —ç—Ç–æ—Ç —á–∞—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üë®üèª‚Äçüíª"
        await bot.bot.send_message(message.from_user.id, text,
                                   reply_markup=cancel_user_kb)

        await FSMMakeOrder.next()


async def mo_payment(message: Message, state: FSMContext):
    async with state.proxy() as data:
        order_id = str(uuid.uuid1()).replace("-", "")
        db.add_order(order_id, message.from_user.id, FSMMakeOrder.products, data["location"], message.text)

        await bot.bot.send_message(message.from_user.id, "üïñ –û–∂–∏–¥–∞–π—Ç–µ. –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—à—ë–ª –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
                                                         " –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.",
                                   reply_markup=user_kb)

        FSMMakeOrder.products.clear()
        await state.finish()
